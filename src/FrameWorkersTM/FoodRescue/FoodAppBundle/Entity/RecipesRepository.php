<?php

namespace FrameWorkersTM\FoodRescue\FoodAppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RecipesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecipesRepository extends EntityRepository
{

    /*
     * count recipe products and update recipes table products_nr field
     * UPDATE recipes SET products_nr = (SELECT COUNT(recipes_id) FROM recipes_products WHERE recipes.id = recipes_products.recipes_id GROUP BY id)
     */

    /*
     * print recipes with products ids
      select a.id, a.name, a.products_nr, (select GROUP_CONCAT(products_id) from recipes_products where recipes_id = a.id) as products_id
      from recipes a LIMIT 10
     */

    /*
     * atvaizduoja receptus, kuriem turim 1 produkta

select distinct(a.id), a.name, a.products_nr,
(select count(products_id) from recipes_products where products_id in (select products_id from my_products where users_id =1) and recipes_id = a.id) as my_products
from recipes a
left join recipes_products b ON a.id = b.recipes_id
where b.products_id in (select products_id from my_products where users_id =1)
and (select count(products_id) from recipes_products where products_id in (select products_id from my_products where users_id =1) and recipes_id = a.id) = 1
    */

    /*
    // atvaizduoja receptus, kuriem turim bent puse reikalingu produktu

select distinct(a.id), a.name, a.products_nr,
(select count(products_id) from recipes_products where products_id in (select products_id from my_products where users_id =1) and recipes_id = a.id) as my_products
from recipes a
left join recipes_products b ON a.id = b.recipes_id
where b.products_id in (select products_id from my_products where users_id =1)
and (select count(products_id) from recipes_products where products_id in (select products_id from my_products where users_id =1) and recipes_id = a.id) >= a.products_nr/2
ORDER BY `my_products`  DESC
    */

    /*
    // atvaizduoja receptus , kuriem turim bent puse reikalingu produktu, kartu su reikalingais produktais

select distinct(a.id), a.name, a.products_nr,
(select count(products_id) from recipes_products where products_id in (select products_id from my_products where users_id =1) and recipes_id = a.id) as my_products,
(SELECT GROUP_CONCAT(d.name)
  from products d
 left join recipes_products e on e.products_id = d.id
 WHERE e.recipes_id = a.id) as products_name
from recipes a
left join recipes_products b ON a.id = b.recipes_id
left join products c ON c.id = b.products_id
where b.products_id in (select products_id from my_products where users_id =1)
and (select count(products_id) from recipes_products where products_id in (select products_id from my_products where users_id =1) and recipes_id = a.id) >= a.products_nr/2
ORDER BY `a`.`id` ASC
    */

    /*
    //atvaizduoja receptus, kuriem turim bent puse reikalingu produktu, kartu su reikalingais ir turimais produktais
SELECT DISTINCT(a.id), a.name, a.products_nr,
(SELECT COUNT(products_id)
    FROM recipes_products
    WHERE products_id IN (SELECT products_id FROM my_products WHERE users_id =1)
    AND recipes_id = a.id)
AS my_products,
(SELECT GROUP_CONCAT(d.name)
    FROM products d
    LEFT JOIN recipes_products e ON e.products_id = d.id
    WHERE e.recipes_id = a.id)
AS products_name,
(SELECT GROUP_CONCAT(name)
    FROM products f
    LEFT JOIN recipes_products g ON g.products_id = f.id
    WHERE id IN (SELECT products_id FROM my_products WHERE users_id =1) AND recipes_id = a.id)
AS my_products_name
FROM recipes a
LEFT JOIN recipes_products b ON a.id = b.recipes_id
LEFT JOIN products c ON c.id = b.products_id
WHERE b.products_id IN (SELECT products_id FROM my_products WHERE users_id = 1)
AND (SELECT COUNT(products_id)
    FROM recipes_products
    WHERE products_id in (SELECT products_id FROM my_products WHERE users_id = 1)
    AND recipes_id = a.id)
>= a.products_nr/2
ORDER BY a.id ASC
     */





    /* a.products_nr, */
    /* shows a number of products user have for recipe
    (SELECT COUNT(products_id)
        FROM FrameWorkersTMFoodRescueFoodAppBundle:RecipesProducts
        WHERE products_id IN (SELECT products_id FROM my_products WHERE users_id =1)
        AND recipes_id = a.id)
    AS my_products,
                 */
    /* shows recipe products names */
    /*
    (SELECT GROUP_CONCAT(d.name)
        FROM products d
        LEFT JOIN recipes_products e ON e.products_id = d.id
        WHERE e.recipes_id = a.id)
    AS products_name,
    */
    /* show products names that user have */
    /*
    (SELECT GROUP_CONCAT(name)
        FROM products f
        LEFT JOIN recipes_products g ON g.products_id = f.id
        WHERE id IN (SELECT products_id FROM my_products WHERE users_id =1) AND recipes_id = a.id)
    AS my_products_name
    */


    /*
    AND (SELECT COUNT(products_id)
        FROM recipes_products
        WHERE products_id in (SELECT products_id FROM my_products WHERE users_id = 1)
        AND recipes_id = a.id)
    >= a.productsNr/2
    */
    public function findRecipes($userid)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT DISTINCT(a.id), a.name

FROM FrameWorkersTMFoodRescueFoodAppBundle:Recipes a
LEFT JOIN FrameWorkersTMFoodRescueFoodAppBundle:RecipesProducts b ON b.recipesId = a.id
LEFT JOIN FrameWorkersTMFoodRescueFoodAppBundle:Products cc ON cc.id = b.productsId
WHERE b.productsId IN (SELECT d.productsId FROM FrameWorkersTMFoodRescueFoodAppBundle:MyProducts d WHERE d.usersId = 1)
                WHERE a.id = :id
                ORDER BY a.id ASC'
            )
            ->setParameter('id', $userid)
            ->getResult();
    }

    public function getProducts()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FrameWorkersTMFoodRescueFoodAppBundle:Recipes p
                ORDER BY p.id ASC'
            )
            ->setMaxResults(1)
            ->getResult();
    }

    public function findAllProductsByRecipeId($id)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FrameWorkersTMFoodRescueFoodAppBundle:RecipesProducts p
                WHERE p.recipesId = :id
                '
            )
            ->setParameter('id', $id)
            ->getResult();
    }


}
